Тестовое задание на летнюю стажировку 2025

Привет!
В нашем отделе решаются очень разнообразные задачи, поэтому у нас найдется интересное дело для специалистов весьма
различных профилей. В связи с этим мы используем следующую схему тестового задания: из предложенных ниже задач Вам
предлагается выбрать в которой Вы чувствуете наибольшую уверенность, и попытаться справиться с ней. В случае успеха Вам одну,
может быть предложена задача на стажировку аналогичной тематики. Удачи!

  Задача 1. Кодон-оптимизация.
Предположим, Вы хотите заставить клетку синтезировать определенный белок. Вы уже определились с аминокислотной последовательностью
белка, а также подготовили клеточную линию-продуцент и научились встраивать в нее гены. Теперь Вам нужно выбрать, какой именно ДНК-
последовательностью закодировать белок. Естественно, Вы хотите добиться наибольшей продуктивности от полученной системы. Таким
образом, возникает задача кодон-оптимизации:
зная аминокислотную последовательность белка, нужно подобрать нуклеотидную
последовательность, которая транслируется в точности в нее и при этом будет наиболее хорошо нарабатываться. Тестовое задание состоит
в том, чтобы написать код, который решает эту задачу: по входной АК последовательности выдает оптимальную НК на Python
последовательность. При желании можно приложить текст с объяснением алгоритма и / или ссылками на источники идей.
В решении будет в первую очередь оцениваться биоинформатическая составляющая: какие параметры последовательности решено
оптимизировать, почему, насколько корректно реализована задумка. Дополнительно мы будем оценивать качество кода.

  Задача 2. Праймеры.
Вам дано несколько нуклеотидных последовательностей, то есть строк из букв A, C, T, G. Требуется к каждой из них подобрать forward-
праймер -
короткую нуклеотидную последовательность, почти или полностью совпадающую с префиксом входной строки. В рамках этой
модельной задачи зададим следующие ограничения на праймеры:
1) Длина праймера d должна лежать в промежутке от 20 до 24 букв.
2) Праймер должен или в точности совпадать с префиксом входной последовательности длины d, или отличаться от него ровно в одной
позиции.
3) GC-content праймера, то есть доля букв G/C в нем, должен лежать в промежутке от 0.5 до 0.7
На выходе требуется получить набор праймеров такой, что для каждой входной строки в нем есть подходящий для нее праймер. Один
праймер может подходить сразу к нескольким строкам!
Требуется написать на скрипт, решающий эту задачу. Постарайтесь сделать алгоритм таким, чтобы он возвращал как можно C, C++ или Haskell
меньше праймеров. В случае, если для какой-то последовательности не может быть создано праймера с заданными характеристиками,
требуется выдать предупреждение и исключить эту последовательность из дальнейшего рассмотрения.
В решении будет в первую очередь оцениваться код, а также корректность полученного алгоритма. Строгая оптимальность, т.е.
гарантированно минимальный набор праймеров, не требуется, но нам будет интересно посмотреть на способы уменьшить полученные
наборы.

  Задача 3. Патенты
В этой задача на входе снова дана последовательность, но в этот раз она хранится в pdf-файле научной статье трехбуквенн
c использованием
ой нотации
. Требуется разработать алгоритм, который распознает эту последовательность и возвращает ее в однобуквенной форме,
допустимо в качестве стартовой точки брать open-source OCR или ML-решения.
В решении будет оцениваться Ваши навыки по реализации выбранного варианта решения, а также способность программы справляться с
"нечеткими" и "запачканными" pdf-ками. Поскольку это тестовое задание, мы принимаем "наброски" и MVP подобных алгоритмов, но будем
рады, если Вы сопроводите их пояснениями о том, как можно было бы развить их далее.
Также можно найти примеры изображений или .